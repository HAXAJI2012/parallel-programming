#include "mpi.h" 
#include <Windows.h>
#include <time.h>
#include <iostream>

using namespace std;

int main(int argc, char* argv[])
{
	int n = 666666;
	int sum = 0;
	int paralSum = 0;
	int tmpSum = 0;
	int ProcNum, ProcRank;
	double parTimeStart, parTimeEnd, timeStart, timeEnd;

	// БЛОК КОДА MPI
	MPI_Init(&argc, &argv); //инициализация
	MPI_Comm_size(MPI_COMM_WORLD, &ProcNum); //кол-во процессов
	MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);//ранг процесса 
	MPI_Status Status; //используем при приёме для данных о сообщении
	int countelem = 0;
	srand(time(0));
	rand();
	int *mas = new int[n];
	for (int i = 0; i<n; i++)
	{
		mas[i] = rand() % 10; //заполняем массив случайным образом
	}
	countelem = n / ProcNum;
	int *tmp = new int[countelem];
	//для 0-го процесса
	if (ProcRank == 0)
	{
		parTimeStart = MPI_Wtime(); // Получение текущего момента выполнения программы
		//отправляем массивы процессам
		for (int i = 1; i<ProcNum; i++)
		{
			tmp = mas + countelem*(i - 1);
			MPI_Send(tmp, countelem, MPI_INT, i, 0, MPI_COMM_WORLD);
		}

		for (int i = (ProcNum - 1)*countelem; i<n; i++)
		{
			paralSum += mas[i];
		}
		//принимаем результаты
		for (int i = 1; i<ProcNum; i++)
		{
			MPI_Recv(&tmpSum, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &Status);
			paralSum += tmpSum;
		}
		parTimeEnd = MPI_Wtime(); // время замерено

		//последовательная версия
		timeStart = MPI_Wtime();
		for (int i = 0; i<n; i++)
			sum += mas[i];
		timeEnd = MPI_Wtime();

		//ВЫВОД РЕЗУЛЬТАТОВ
		printf("sum = %d\ntime = %.9f\n\n", sum, timeEnd - timeStart);
		printf("Parallel sum = %d\ntime = %.9f\n", paralSum, parTimeEnd - parTimeStart);

	}

	//для всех остальных процессов
	if (ProcRank != 0)
	{
		MPI_Recv(tmp, countelem, MPI_INT, 0, 0, MPI_COMM_WORLD, &Status);
		for (int i = 0; i<countelem; i++)
			tmpSum += tmp[i];
		MPI_Send(&tmpSum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
	}
	MPI_Finalize(); //окончание блока mpi
	delete mas;
	return 0;
}